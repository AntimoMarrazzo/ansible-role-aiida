---
- name: add aiida templates folder
  file:
    path: "{{ aiida_templates_folder }}"
    state: "directory"
    mode: 0755

# get anyway the GIT code, it is often useful; checkout the same version (now actually we are forcing a different branch/tag...)
- name: Get the AiiDA code from GIT
  git:
    repo: 'https://github.com/aiidateam/aiida-core.git'
    dest: "{{ ansible_env.HOME }}/src/aiida-core"
    version: "{{ aiida_tag }}"

- name: Install AiiDA git code
  pip:
    name:
      - "{{ ansible_env.HOME }}/src/aiida-core"
    virtualenv: "{{ aiida_venv }}"
    editable: true
    extra_args: --no-use-pep517
  register: aiida_core_install
  notify: reentry scan

- meta: flush_handlers

- name: "Activate TAB completion in virtualenv"
  lineinfile:
    path: "{{ aiida_venv }}/bin/activate"
    line: 'eval "$(verdi completioncommand)"'

- name: copy profile config
  template:
    src: profile.yml
    dest: "{{ aiida_templates_folder }}/profile.yml"

- name: "Check if AiiDA has already been configured"
  stat: path="{{ ansible_env.HOME }}/.aiida/config.json"
  register: aiida_config_file

- name: "Set up AiiDA profile"
  # Need to use the full path because it's in a virtualenv
  shell: |
      {{ aiida_venv }}/bin/verdi setup \
      --non-interactive \
      --config {{ aiida_templates_folder }}/profile.yml
  when: not aiida_config_file.stat.exists

- name: "Set the default AiiDA profile"
  shell: "{{ aiida_venv }}/bin/verdi profile setdefault {{ aiida_profile_name }}"
  # not ideal - better to read default profile from config
  when: not aiida_config_file.stat.exists

- include_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "version"
    value: "{{ aiida_version }}"
  when: release_notes is defined and release_notes

- include_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "usage"
    value: >-
        AiiDA is installed in a virtual environment.
        Type 'workon aiida' to get access to the 'verdi' commands.
  when: release_notes is defined and release_notes
