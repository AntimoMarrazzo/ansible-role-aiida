- name: Install DB and more
  become: true
  become_user: "{{ root_user }}"
  apt:
      name: "{{ item }}"
      state: present
  with_items:
    # Compilation
    - postgresql 
    - postgresql-server-dev-all 
    - postgresql-client
    - python-psycopg2
    - libpq-dev
    # Needed for the ASE visualizer
    - python-gtk2
    # For AiiDA
    - libffi-dev
    - libssl-dev
    - graphviz

# This can be necessary on docker
- name: Make sure postgres service is started
  become: True
  become_user: "{{ roota_user }}"
  service:
    name: "postgresql"
    state: "started"

- name: Setup postgres db
  become: True
  become_user: "{{ aiida_postgres_user }}"
  postgresql_db:
    name: "{{ aiida_postgres_db }}"

- name: Setup postgres user
  become: True
  become_user: "{{ aiida_postgres_user }}"
  postgresql_user:
    db: "{{ aiida_postgres_db }}"
    name: "{{ aiida_postgres_db_user }}"
    password: "{{ aiida_postgres_db_pw }}"

## NOTE ALSO THAT LATER WE REINSTALL AIIDA AT A DIFFERENT VERSION!
## Moreover, it installs a specific old version of pip
## TODO: replace this with installing the needed packages
##   that should only be "aiida-ase>=1.0.1", "aiida-codtools>=1.0.1", "aiida-nwchem>=1.0.1".
- name: Install the aiida meta package
  pip:
    name: "{{ item }}"
    virtualenv: "{{ aiida_venv }}"
  with_items:
  - aiida-core=={{ aiida_version }}
  - aiida-ase>=1.0.1
  - aiida-codtools>=1.0.1
  - aiida-nwchem>=1.0.1
  register: pip_install

# get anyway the GIT code, it is often useful; checkout the same version (now actually we are forcing a different branch/tag...)
- name: Get the AiiDA code from GIT
  git:
    repo: 'https://github.com/aiidateam/aiida_core.git'
    dest: "${HOME}/codes/aiida_core"
    version: "{{ aiida_tag }}"
    force: True

- name: Make sure pip is at a recent version
  pip:
    name: "pip>=10.0.0"
    virtualenv: "{{ aiida_venv }}"
  when: pip_install.changed

- name: Additional pip dependencies
  pip:
      name: "{{ item }}"
      virtualenv: "{{ aiida_venv }}"
  with_items:
    - seekpath

## PyGTK cannot be installed with pip... we need to use 
## a workaround, see https://stackoverflow.com/questions/12830662/
- name: workaround to install pygtk 2 inside the virtualenv [making dir]
  file:
    path: "{{ aiida_venv }}/lib/python2.7/dist-packages/"
    state: "directory"
    mode: 0755

- name: workaround to install pygtk 2 inside the virtualenv [creating symlinks]
  file:
    src: "/usr/lib/python2.7/dist-packages/{{ item }}"
    dest: "{{ aiida_venv }}/lib/python2.7/dist-packages/{{ item }}"
    state: link
  with_items:
    - glib
    - gobject
    - gtk-2.0
    - pygtk.pth
    - pygtk.py
    - cairo

- name: "Activate TAB completion in virtualenv"
  lineinfile: 
    path: "{{ aiida_venv }}/bin/activate"
    line: 'eval "$(verdi completioncommand)"'

- name: "Check if AiiDA has already been configured"
  stat: path="${HOME}/.aiida/config.json"
  register: aiida_config_file

- name: "Configure AiiDA"
  # Need to use the full path because it's in a virtualenv
  shell: |
       {{ aiida_venv }}/bin/verdi setup default --non-interactive \
       --email aiida@localhost \
       --backend django \
       --db_host localhost --db_port 5432 \
       --db_name {{ aiida_postgres_db }} \
       --db_user {{ aiida_postgres_db_user }} --db_pass '{{ aiida_postgres_db_pw }}' \
       --repo ${HOME}/.aiida/repository-aiida/
  when: aiida_config_file.stat.exists == False

## I removed the when condition, it's fast enough;
## TODO: find a way to set the 'changed_when' ansible condition
- name: "Set the default AiiDA profile"
  shell: "{{ aiida_venv }}/bin/verdi profile setdefault default"

- include_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "version"
    value: "{{ aiida_version }}, reinstalled later to tag/branch {{ aiida_tag }}"
  when: release_notes is defined and release_notes

- include_role:
    name: release_notes
  vars:
    section: "AiiDA"
    option: "usage"
    value: >-
        AiiDA is installed in a virtual environment. 
        Type 'workon aiida' to get access to the 'verdi' commands.
  when: release_notes is defined and release_notes
